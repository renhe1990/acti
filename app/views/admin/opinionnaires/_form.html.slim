- if survey.errors[:base].present?
  .alert.alert-danger
    button.close type='button' data-dismiss='alert' aria-hidden=true x
    - survey.errors[:base].each do |message|
      div= message

= simple_form_for(survey, url: defined?(url) ? url : survey, html: { class: 'survey_form opinionnaire_form' }) do |f|
  .row
    .col-sm-12
      .pull-right.btn-group
        = f.submit (survey.new_record? ? '创建' : '更新') + I18n.t('activerecord.models.' + f.object.type.underscore), class: 'btn btn-primary', 'data-loading-text' => '正在提交...', autocomplete: 'off'
        = link_to '取消编辑', :back, class: 'btn btn-default'

  hr

  = f.input :course_id, as: :hidden
  = f.input :name
  = f.input :description, input_html: { rows: 5 }

  = f.input :lecturer_weight
  .form-group
    = f.label :user_ids, '选择评委'
    p
      = link_to '选择所有', '#', class: 'select-all', 'data-target' => "#opinionnaire_user_ids"
      | \
      = link_to '取消所有', '#', class: 'deselect-all', 'data-target' => "#opinionnaire_user_ids"

    == f.input_field :user_ids, collection: @lecturers, multiple: true, class: 'multi-select'


  = f.input :student_weight
  .form-group
    = f.label :user_ids, '选择学员'
    p
      = link_to '选择所有', '#', class: 'select-all', 'data-target' => "#opinionnaire_user_ids_plus"
      | \
      = link_to '取消所有', '#', class: 'deselect-all', 'data-target' => "#opinionnaire_user_ids_plus"

    == f.input_field :user_ids, collection: @course.users, multiple: true, class: 'multi-select', id: 'opinionnaire_user_ids_plus'


  .form-group
    = f.label :reviewee_ids, '选择人员'
    p
      label 选择演讲抽签结果
      = select_tag 'draw_id', options_from_collection_for_select(@course.speech_draws, "id", "title"), class: 'form-control', prompt: '请选择演讲抽签', 'data-url' => draw_results_admin_course_url(@course)
    p
      label 或者选择辩论抽签结果
      = select_tag 'draw_id', options_from_collection_for_select(@course.debate_draws, "id", "title"), class: 'form-control', prompt: '请选择辩论抽签', 'data-url' => draw_results_admin_course_url(@course)
    p
      label 或者直接选择
      br
      = link_to '选择所有', '#', class: 'bsm-select-all', 'data-target' => "#opinionnaire_reviewee_ids"
      | \
      = link_to '取消所有', '#', class: 'bsm-deselect-all', 'data-target' => "#opinionnaire_reviewee_ids"

      == f.input_field :reviewee_ids, collection: @course.users, multiple: true, class: 'bsmSelect',  'data-selected' => @opinionnaire.reviewees.map(&:id)

  = f.simple_fields_for :questions do |question|
    = render "rating_question_fields", f: question, survey: survey
    hr

  .row.add-question
    .col-xs-8.col-sm-3
      = select_tag :question_type, options_for_select(question_type_options), class: 'form-control'
    .col-xs-4.col-sm-3
      = link_to_add_association '添加一道题目', f, :questions, partial: 'rating_question_fields', class: 'btn btn-primary add-question-link',
                                                   'data-association-insertion-node' => '.add-question',
                                                   'data-association-insertion-traversal' => 'closest',
                                                   render_options: { locals: { survey: survey } }

  br
  = f.input :comment, input_html: { class: 'tinymce', rows: 5 }

  .row
    .col-sm-12
      .pull-right.btn-group
        = f.submit (survey.new_record? ? '创建' : '更新') + I18n.t('activerecord.models.' + f.object.class.to_s.underscore), class: 'btn btn-primary', 'auto-loading-text' => '正在提交...', autocomplete: 'off'
        = link_to '取消编辑', :back, class: 'btn btn-default'

- content_for :javascript do
  = tinymce
  javascript:
    function registerAfterInsertActions() {
      $('.survey_form').on('cocoon:after-insert', function(e, insertedItem) {
        if($(insertedItem).hasClass('question-fields')) {
          var question_type = $('#question_type').val();
          $.each($(insertedItem), function(index, item) {
            if(!$(item).hasClass(question_type)) {
              $(item).remove();
            }
          });

          var totalQuestions = $('.question-fields:visible').length;
          $(insertedItem).find('.question-number').html(totalQuestions);
          $(insertedItem).find(".#{ survey.type.underscore }_questions_position input").val(totalQuestions);
          $(insertedItem).find('input.required:first').focus();

          $('.survey_form').sortable('refresh');
        } else if($(insertedItem).hasClass('option-fields')) {
          var container = $(insertedItem).closest('.question-body');
          var totalOptions = $(container).find('.option-fields:visible').length;
          $(insertedItem).find('.option-number').html(String.fromCharCode(96 + totalOptions).toUpperCase());
          $(insertedItem).find(".#{ survey.type.underscore }_questions_options_position").val(totalOptions);
          $(insertedItem).find('input.form-control').focus();

          $('.options-container').sortable('refresh');
        }

        registerOptions();
      });
    }

    function registerAfterRemoveActions() {
      $('.survey_form').on('cocoon:after-remove', function(e, item) {
        if($(item).hasClass('question-fields')) {
          $('.question-fields:visible').each(function(index, question) {
            $(question).find('.question-number').html(index + 1);
            $(question).find(".#{ survey.type.underscore }_questions_position input").val(index + 1);
          });
        } else if ($(item).hasClass('option-fields')) {
          $(e.target).find('.option-fields:visible').each(function(index, option) {
            $(option).find('.option-number').html(String.fromCharCode(97 + index).toUpperCase());
            $(option).find(".#{ survey.type.underscore }_questions_options_position").val(index + 1);
          });
        }
      });
    }

    function registerOptions() {
      $(".nested-fields input[type='checkbox'], .nested-fields input[type='radio']").on('click', function(e) {
        var container = $(e.target).closest('.question-body');
        var grouped = $(e.target).data('grouped');
        if(grouped) {
          if($(e.target).prop("checked")) {
            $.each(container.find("input[type='checkbox'],input[type='radio']"), function(index, input) {
              $(input).prop("checked", false);
            });
            $(e.target).prop("checked", true);
          }
        }
      });
    }

    function checkQuestions() {
      $('.question-fields').each(function(index, question) {
      });
    }

    function checkOptions(question) {
      $(question).find('.options-container');
    }

    registerAfterInsertActions();
    registerAfterRemoveActions();

    registerOptions();

    // sort questions
    $('.survey_form').sortable({
      itemSelector: '.question-fields',
      handle: 'span.glyphicon-move',
      placeholder: "<span class='glyphicon glyphicon-arrow-right'/>",
      onDrop: function($item, container, _super) {
        $('.survey_form').find('.question-fields').each(function(index, question) {
          $(question).find('.question-number').html(index + 1);
          $(question).find('.questionnaire_questions_position input').val(index + 1);
          console.log($(question).find('.questionnaire_questions_position input'));
        });
        _super($item, container);
      }
    });

    // sort options
    $('.options-container').sortable({
      itemSelector: '.option-fields',
      placeholder: "<span class='glyphicon glyphicon-arrow-right'/>",
      onDrop: function($item, container, _super) {
        var container = $item.closest('.question-body');
        container.find('.option-fields:visible').each(function(index, option) {
          $(option).find('.option-number').html(String.fromCharCode(97 + index).toUpperCase());
          $(option).find('.questionnaire_questions_options_position input').val(index + 1);
        });
        _super($item, container);
      }
    });

    $('form').submit(function(e) {
      var submit = true;
      checkQuestions();

      if(!submit) {
        e.preventDefault();
      }
    });
